# THREADS
TID	NAME	CLASS
0	test4	org.cooperari.junit.CJUnitRunner$MethodRunner
1	<1>	pc.stack.StackTest$$Lambda$13/1438313585
2	<2>	pc.stack.StackTest$$Lambda$14/1367699998
3	<3>	pc.stack.StackTest$$Lambda$15/344450634
4	<4>	pc.stack.StackTest$$Lambda$16/662842333
# EXECUTION TRACE
#	TID	STEP	EVENT	SOURCE FILE	LINE	YIELD POINT	STAGE
0	0	0	-	<system>	0	<started>	0
1	0	1	-	AArrayStackV1.java	21	field-set(pc.stack.AArrayStackV1.array)	0
2	0	2	-	AArrayStackV1.java	22	field-set(pc.stack.AArrayStackV1.top)	0
3	0	3	-	StackTest.java	187	org.cooperari.CSystem.forkAndJoin(Runnable[])	0
4	0	4	-	StackTest.java	187	org.cooperari.CSystem.forkAndJoin(Runnable[])	1
5	1	0	-	<system>	0	<started>	0
6	2	0	-	<system>	0	<started>	0
7	2	1	-	AArrayStackV1.java	41	field-get(pc.stack.AArrayStackV1.top)	0
8	1	1	-	AArrayStackV1.java	35	field-get(pc.stack.AArrayStackV1.top)	0
9	1	2	-	AArrayStackV1.java	35	java.util.concurrent.atomic.AtomicInteger.getAndIncrement()	0
10	1	3	-	AArrayStackV1.java	36	field-get(pc.stack.AArrayStackV1.array)	0
11	1	4	-	AArrayStackV1.java	35	field-get(pc.stack.AArrayStackV1.top)	0
12	2	2	-	AArrayStackV1.java	41	java.util.concurrent.atomic.AtomicInteger.get()	0
13	2	3	-	AArrayStackV1.java	44	field-get(pc.stack.AArrayStackV1.top)	0
14	2	4	-	AArrayStackV1.java	44	java.util.concurrent.atomic.AtomicInteger.decrementAndGet()	0
15	2	5	-	AArrayStackV1.java	45	field-get(pc.stack.AArrayStackV1.array)	0
16	2	6	-	AArrayStackV1.java	46	field-get(pc.stack.AArrayStackV1.array)	0
17	2	7	-	StackTest.java	189	field-set(pc.stack.StackTest.R.v)	0
18	1	5	-	AArrayStackV1.java	35	java.util.concurrent.atomic.AtomicInteger.getAndIncrement()	0
19	1	6	-	AArrayStackV1.java	36	field-get(pc.stack.AArrayStackV1.array)	0
20	2	8	-	<system>	0	<terminated>	0
21	1	7	-	AArrayStackV1.java	41	field-get(pc.stack.AArrayStackV1.top)	0
22	1	8	-	AArrayStackV1.java	41	java.util.concurrent.atomic.AtomicInteger.get()	0
23	1	9	-	AArrayStackV1.java	44	field-get(pc.stack.AArrayStackV1.top)	0
24	1	10	-	AArrayStackV1.java	44	java.util.concurrent.atomic.AtomicInteger.decrementAndGet()	0
25	1	11	-	AArrayStackV1.java	45	field-get(pc.stack.AArrayStackV1.array)	0
26	1	12	-	AArrayStackV1.java	46	field-get(pc.stack.AArrayStackV1.array)	0
27	1	13	-	StackTest.java	188	field-set(pc.stack.StackTest.R.v)	0
28	1	14	-	<system>	0	<terminated>	0
29	0	5	-	StackTest.java	191	org.cooperari.CSystem.forkAndJoin(Runnable[])	0
30	0	6	-	StackTest.java	191	org.cooperari.CSystem.forkAndJoin(Runnable[])	1
31	3	0	-	<system>	0	<started>	0
32	4	0	-	<system>	0	<started>	0
33	4	1	-	AArrayStackV1.java	41	field-get(pc.stack.AArrayStackV1.top)	0
34	4	2	-	AArrayStackV1.java	41	java.util.concurrent.atomic.AtomicInteger.get()	0
35	3	1	-	AArrayStackV1.java	35	field-get(pc.stack.AArrayStackV1.top)	0
36	3	2	-	AArrayStackV1.java	35	java.util.concurrent.atomic.AtomicInteger.getAndIncrement()	0
37	3	3	-	AArrayStackV1.java	36	field-get(pc.stack.AArrayStackV1.array)	0
38	3	4	-	AArrayStackV1.java	41	field-get(pc.stack.AArrayStackV1.top)	0
39	4	3	-	AArrayStackV1.java	44	field-get(pc.stack.AArrayStackV1.top)	0
40	3	5	-	AArrayStackV1.java	41	java.util.concurrent.atomic.AtomicInteger.get()	0
41	3	6	-	AArrayStackV1.java	44	field-get(pc.stack.AArrayStackV1.top)	0
42	4	4	-	AArrayStackV1.java	44	java.util.concurrent.atomic.AtomicInteger.decrementAndGet()	0
43	3	7	-	AArrayStackV1.java	44	java.util.concurrent.atomic.AtomicInteger.decrementAndGet()	0
44	3	8	-	AArrayStackV1.java	45	field-get(pc.stack.AArrayStackV1.array)	0
45	4	5	-	AArrayStackV1.java	45	field-get(pc.stack.AArrayStackV1.array)	0
46	3	9	-	AArrayStackV1.java	46	field-get(pc.stack.AArrayStackV1.array)	0
47	4	6	-	<system>	0	<terminated>	0
48	3	10	-	StackTest.java	192	field-set(pc.stack.StackTest.R.v)	0
49	3	11	-	<system>	0	<terminated>	0
50	0	7	-	<system>	0	<terminated>	0
# STACK TRACE FOR FAILURE
java.lang.ArrayIndexOutOfBoundsException: -1
	at pc.stack.AArrayStackV1.pop(AArrayStackV1.java:45)
	at pc.stack.StackTest.lambda$test4$15(StackTest.java:193)
	at org.cooperari.core.CThread.run(CThread.java:188)
